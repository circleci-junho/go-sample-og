/*
CFD

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddImage200Response struct for AddImage200Response
type AddImage200Response struct {
	ImageId *int32 `json:"imageId,omitempty"`
}

// NewAddImage200Response instantiates a new AddImage200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddImage200Response() *AddImage200Response {
	this := AddImage200Response{}
	return &this
}

// NewAddImage200ResponseWithDefaults instantiates a new AddImage200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddImage200ResponseWithDefaults() *AddImage200Response {
	this := AddImage200Response{}
	return &this
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *AddImage200Response) GetImageId() int32 {
	if o == nil || o.ImageId == nil {
		var ret int32
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddImage200Response) GetImageIdOk() (*int32, bool) {
	if o == nil || o.ImageId == nil {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *AddImage200Response) HasImageId() bool {
	if o != nil && o.ImageId != nil {
		return true
	}

	return false
}

// SetImageId gets a reference to the given int32 and assigns it to the ImageId field.
func (o *AddImage200Response) SetImageId(v int32) {
	o.ImageId = &v
}

func (o AddImage200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImageId != nil {
		toSerialize["imageId"] = o.ImageId
	}
	return json.Marshal(toSerialize)
}

type NullableAddImage200Response struct {
	value *AddImage200Response
	isSet bool
}

func (v NullableAddImage200Response) Get() *AddImage200Response {
	return v.value
}

func (v *NullableAddImage200Response) Set(val *AddImage200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddImage200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddImage200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddImage200Response(val *AddImage200Response) *NullableAddImage200Response {
	return &NullableAddImage200Response{value: val, isSet: true}
}

func (v NullableAddImage200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddImage200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


